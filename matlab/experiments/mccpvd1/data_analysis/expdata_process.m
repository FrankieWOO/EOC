%process the data generated by combination of different w and alpha, and
%ran by multiple times

%%
%prepare data, u x 
% tjs: three dimensional cell array
%       N of w, N of alpha, N of iteration
iteration = 10;

%weights = linspace(0,0.5,50);
tjs = cell(51,4,iteration);
filefolder = fullfile('output','170318','optimization_weights');
alphas_name = [0 2 5 10]; %not the true alpha value, just for naming file
nWeights = 51;

for j=1:length(alphas_name)
    for k = 1:iteration
        filename = ['results_', num2str(alphas_name(j)),'_',num2str(k),'.mat'];
        filename = fullfile(filefolder,filename);
        data_struct = load(filename);
        for i = 1:nWeights
            tj = [];
            tj.x = data_struct.res_x{i};
            tj.u = data_struct.res_u{i};
            tj.alpha = data_struct.recovery_ratio;
            tj.w = data_struct.weights(i);
            tj.total_cost = data_struct.res_cost{i};
            tj.energy_cost = data_struct.res_cost_e{i};
            tj.accuracy_cost = data_struct.res_cost_rt(i);
            tj.energy_cost2go = data_struct.res_cost_Etogo{i};
            tj.settling_time = data_struct.res_settlingTime{i};
            tj.power_model = data_struct.power_model;
            tjs{i,j,k} = tj;
        end
    
    end
end
weights = 0:0.01:0.5;
alphas = [0 0.2 0.5 1];
%%
% calculate trajectories

%%
% put data into matrices for different alpha

[nWeights, nAlphas, iteration] = size(tjs);

energy_cost_maxtrix = cell(nAlphas,1);
% energy cost for alpha in alphas
for j = 1:nAlphas
    energy_cost_maxtrix{j} = zeros(nWeights,iteration);
    for i = 1:nWeights
        for k = 1:iteration
            energy_cost_maxtrix{j}(i,k) = tjs{i,j,k}.energy_cost;
        end
    end
end

accuracy_cost_maxtrix = cell(nAlphas,1);
% energy cost for alpha in alphas
for j = 1:nAlphas
    accuracy_cost_maxtrix{j} = zeros(nWeights,iteration);
    for i = 1:nWeights
        for k = 1:iteration
            accuracy_cost_maxtrix{j}(i,k) = tjs{i,j,k}.accuracy_cost;
        end
    end
end

%%
%calculate the benchmark work, ratios
mccvd_model = maccepa_model('MACCEPAVD',1,0.02);
for i = 1:nWeights
    
    for k = 1:iteration
        benchmark_tj = tjs{i,1,k};
        
        p = [];
        p.power_model = 8;
        p.model = mccvd_model;    
        p.dt = 0.02;
        for j = 1:nAlphas
            
            p.alpha = tjs{i,j,k}.alpha;
            
            netWork0 = cmptWork(benchmark_tj.x,benchmark_tj.u , p);
            
            tjs{i,j,k}.netWork0 = netWork0;
            
        
        end
    end
end


%%
netWork_maxtrix = cell(nAlphas,1);
netWork0_maxtrix = cell(nAlphas,1);
netWork_wNa = zeros(51,4);
netWork0_wNa = zeros(51,4);
netWork_wNa_sd = zeros(51,4);
netWork0_wNa_sd = zeros(51,4);
% energy cost for alpha in alphas
for j = 1:nAlphas
    netWork_maxtrix{j} = zeros(nWeights,iteration);
    netWork0_maxtrix{j} = zeros(nWeights,iteration);
    for i = 1:nWeights
        for k = 1:iteration
            netWork_maxtrix{j}(i,k) = tjs{i,j,k}.energy_cost;
            netWork0_maxtrix{j}(i,k) = tjs{i,j,k}.netWork0;
            
        end

        
    end
    meanW = mean(netWork_maxtrix{j},2);
    meanW0 = mean(netWork0_maxtrix{j},2);
    sdW = std(netWork_maxtrix{j},0,2);
    sdW0 = std(netWork0_maxtrix{j},0,2);
    netWork_wNa(:,j) = meanW; 
    netWork0_wNa(:,j) = meanW0;
    netWork_wNa_sd(:,j) = sdW;
    netWork0_wNa_sd(:,j) = sdW0;
end

%% errorbar
%weights = 0:0.01:0.5;
%alphas = [0 0.2 0.5 1];
diff_W = (netWork0_wNa-netWork_wNa)./netWork0_wNa;
sdW_cross = sqrt(sdW.*sdW0);
figure
[X,Y] = meshgrid(weights,alphas);
hold on
for i=1:4

    %plot3(weights,alphas(i)*ones(51,1),diff_W(:,i));
    errorbar(weights,diff_W(:,i),sdW_cross);
end

%%
weights = 0:0.01:0.5;
netWorkm1 = netWork_maxtrix{1};

%%
figure
hold on
for j=3:4
    energy2plot = [];
    accuracy2plot=[];
    
    energy2plot0 = [];
    %accuracy2plot0=[];
    for k=1:10
       energy2plot0 = [energy2plot0; netWork0_maxtrix{j}(:,k)];
       accuracy2plot=[accuracy2plot; accuracy_cost_maxtrix{j}(:,k)];
       energy2plot = [energy2plot; netWork_maxtrix{j}(:,k)];
       
    end
    scatter3(energy2plot0, alphas(j)*ones(510,1),accuracy2plot,'b.') ;
    scatter3(energy2plot, alphas(j)*ones(510,1),accuracy2plot,'r.') ;
       
end

%%
x2plot = cell(20,1);
u2plot = cell(20,1);
for k=1:10
    x2plot{k} = tjs{11,1,k}.x(:,1:51);
    x2plot{10+k}=tjs{11,4,k}.x(:,1:51);
    u2plot{k} = tjs{11,1,k}.u(:,1:50);
    u2plot{10+k}=tjs{11,4,k}.u(:,1:50);

end
rege_ratio = ones(20,1);
p.T = 1;
p.x_target = pi/3;
plot_traj2(x2plot, u2plot,p, rege_ratio)
%%
h = gca;
ploth = findobj(h,'Type','line');
%%
for i=1:10
   set(ploth(i),'Color','r') 
end

for i=11:20
   set(ploth(i),'Color','b') 
end

